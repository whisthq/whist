# workflows/protocol-check-pr.yml
#
# Protocol: Check PR
# Checks a protocol PR for building, linting, and clang standards success

name: "Protocol: Check PR"

on:
  push:
    # Trigger runs on our default branch, `dev`, to upload code coverage reports to Codecov
    branches:
      - dev
    paths:
      - "protocol/**"
      - "!protocol/**/README.md"
      - ".github/workflows/protocol-check-pr.yml"
      - "mandelboxes/scripts/copy_protocol_build.sh"
  pull_request:
    paths:
      - "protocol/**"
      - "!protocol/**/README.md"
      - ".github/workflows/protocol-check-pr.yml"
      - "mandelboxes/scripts/copy_protocol_build.sh"
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: protocol-check-pr-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  # Check Protocol PRs
  protocol-check-pr:
    name: Build and Check Protocol on ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - name: "Windows"
            os: windows-2019
            arch: x86_64
            # Set to true to CUDA-optimize Windows server. This is slow to install (5-7 minutes).
            cuda: false
          - name: "Ubuntu Linux"
            os: ubuntu-20.04
            arch: x86_64
          - name: "macOS (x64)"
            os: macos-11.0
            arch: x86_64
          - name: "macOS (arm64)"
            os: macos-11.0
            arch: arm64

    env:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

    steps:
      ################################## CONFIG STEPS START ##############################

      - name: Checkout Git Repository
        uses: actions/checkout@v3

      # Necessary for downloading protocol libs and base Dockerfile NVIDIA GRID drivers from AWS S3
      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      ###################################################################################
      ################################ WINDOWS STEPS START ##############################
      - name: Reverse shell # demo for enable reverse shell, you can put this code to anywhere
        if: runner.os == 'Windows' && 0 # remove "&& 0"  to enable
        working-directory: .github\workflows\helpers\debug
        run: python3 .\reverse_shell.py 100.26.147.xxx 5003 #don't forget to change to your own ip

      # We hardcode cppcheck version to 2.7, since version 2.8 is broken on Chocolatey starting May 24, 2022
      - name: Install Chocolatey dependencies on Windows GHA Machine
        if: runner.os == 'Windows'
        shell: powershell
        run: (choco install cppcheck --version 2.7) -and (choco install ninja)

      - name: Set up Visual Studio Developer Command Prompt (for nmake) on Windows GHA Machine
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Install CUDA on Windows GHA Machine
        if: runner.os == 'Windows' && matrix.config.cuda
        working-directory: .github\workflows\helpers\protocol
        env:
          visual_studio: "Visual Studio 16 2019" # Imported from env in the .ps1 script
          cuda: "11.0.167" # Imported from env in the .ps1 script, we use CUDA 11.0
        shell: powershell
        run: |
          # Install CUDA and set paths
          .\install_cuda_windows.ps1
          if ($?) {
            # Set paths for subsequent steps, using $env:CUDA_PATH
            echo "Adding CUDA to CUDA_PATH, CUDA_PATH_X_Y and PATH"
            echo "CUDA_PATH=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "$env:CUDA_PATH_VX_Y=$env:CUDA_PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "$env:CUDA_PATH/bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          } else {
            exit 1
          }

      - name: Verify that NVCC is Installed on GHA Windows Machine
        if: runner.os == 'Windows' && matrix.config.cuda
        shell: powershell
        run: |
          nvcc -V
          ls $env:CUDA_PATH
          ls $env:CUDA_PATH\bin
          ls $env:CUDA_PATH\include

      - name: Register OS Compiler Matchers
        shell: bash --noprofile --norc -eo pipefail {0}
        run: |
          # OS-independent matchers
          echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cppcheck_matcher.json"
          echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/cmake_matcher.json"

          # OS-specific matchers
          if [ "$RUNNER_OS" == "Linux" ]; then
              echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/gcc_matcher.json"
          elif [ "$RUNNER_OS" == "Windows" ]; then
              echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/msvc_matcher.json"
          elif [ "$RUNNER_OS" == "macOS" ]; then
              echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"
          fi

      - name: Build and Test Protocol Client and Server on Windows
        if: runner.os == 'Windows'
        shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
        working-directory: protocol
        run: |
          mkdir build
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DCHECK_CI=TRUE -G "Ninja" || EXIT /B 1
          ninja WhistClient || EXIT /B 1
          ninja WhistServer || EXIT /B 1
          ninja test || EXIT /B 1

      - name: Verify builds with clang-tidy on Windows
        if: runner.os == 'Windows'
        shell: cmd # Acts as Visual Studio Developer Command Prompt due to ilammy/msvc-dev-cmd@v1
        working-directory: protocol
        run: |
          REM Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
          echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          REM Run clang-tidy
          cd build
          ninja clang-tidy || EXIT /B 1

      ###################################################################################
      ################################# MACOS STEPS START ###############################
      - name: Reverse shell # demo for enable reverse shell, you can put this code to anywhere
        if: runner.os == 'macOS' && 0 # remove "&& 0"  to enable
        working-directory: .github/workflows/helpers/debug
        run: |
          if [[ "${{ matrix.config.arch}}" == "x86_64" ]]; then
            python3 ./reverse_shell.py 100.26.147.xxx 5003 #don't forget to change to your own ip
          fi

      - name: Install macOS Client Protocol Dependencies on macOS GHA Machines
        if: runner.os == 'macOS'
        working-directory: protocol
        run: |
          # llvm for clang-tidy, coreutils for realpath, lcov for codecov
          brew install llvm coreutils perl doxygen lcov
          ln -s "/usr/local/opt/llvm/bin/clang-format" "/usr/local/bin/clang-format"
          ln -s "/usr/local/opt/llvm/bin/clang-tidy" "/usr/local/bin/clang-tidy"

      - name: Build and Test Protocol Client on macOS
        if: runner.os == 'macOS'
        working-directory: protocol
        run: |
          # Build the protocol and its test suite, note that ASan doesn't support detect_leaks on macOS clang
          # We turn off any mimalloc linking because ASan doesn't support custom allocators either
          cmake \
            -S . \
            -B build \
            -D CMAKE_BUILD_TYPE=Debug \
            -D CHECK_CI=TRUE \
            -D SANITIZE=address+undefined \
            -D USE_MIMALLOC=OFF \
            -D MACOS_TARGET_ARCHITECTURE=${{ matrix.config.arch }}

          cd build
          make -j WhistClient

          if [[ "${{ matrix.config.arch}}" == "x86_64" ]]; then
            # Run the tests
            make -j test
          else
            # Just build the test, but we can't run it because we are cross-compiling
            make -j WhistProtocolTest
          fi

      - name: Build the Protocol Client Library on macOS
        if: runner.os == 'macOS'
        working-directory: protocol
        run: |
          cmake \
            -S . \
            -B build-lib \
            -D CMAKE_BUILD_TYPE=Debug \
            -D CLIENT_SHARED_LIB=ON \
            -D MACOS_TARGET_ARCHITECTURE=${{ matrix.config.arch }}

          cd build-lib
          make -j WhistClient

      - name: Verify Builds with clang-tidy on macOS
        if: runner.os == 'macOS'
        working-directory: protocol
        run: |
          # Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
          echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          # Run clang-tidy
          cd build
          make -j clang-tidy

      ###################################################################################
      ################################# LINUX STEPS START ###############################
      - name: Reverse shell # demo for enable reverse shell, you can put this code to anywhere
        if: runner.os == 'Linux' && 0 # remove "&& 0"  to enable
        working-directory: .github/workflows/helpers/debug
        run: python3 ./reverse_shell.py 100.26.147.xxx 5003 #don't forget to change to your own ip

      - name: Build Protocol Client on Ubuntu Linux
        if: runner.os == 'Linux'
        working-directory: protocol
        run: ./build_protocol_targets.sh --cmakebuildtype=Debug --cmakesetCI --sanitize=address+undefined WhistClient

      - name: Build Protocol Server on Ubuntu Linux
        if: runner.os == 'Linux'
        working-directory: protocol
        run: ./build_protocol_targets.sh --cmakebuildtype=Debug --cmakesetCI --sanitize=address+undefined WhistServer

      - name: Run Protocol Tests on Ubuntu Linux
        if: runner.os == 'Linux'
        working-directory: protocol
        run: ./build_protocol_targets.sh --cmakebuildtype=Debug --cmakesetCI --sanitize=address+undefined --nogpu test

      # Verify clang-format on Linux
      - name: Verify Builds with clang-format
        if: runner.os == 'Linux'
        working-directory: protocol
        run: |
          # Clang-matcher for clang-format, added after the main build sequence so that clang doesn't match gcc errors
          echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          # Print clang-format version for local comparison
          clang-format --version

          # Run clang-format
          ./build_protocol_targets.sh clang-format

          # Show diff in GitHub Actions logs
          git diff HEAD .

          # This will return an error if there is a non-empty diff
          git diff-index --quiet HEAD .

      - name: Verify Builds with clang-tidy on Ubuntu Linux
        if: runner.os == 'Linux'
        working-directory: protocol
        run: |
          # Clang-matcher for clang-tidy, added after the main build sequence so that clang doesn't match gcc/msvc errors
          echo "::add-matcher::${{ github.workspace }}/.github/workflows/helpers/protocol/clang_matcher.json"

          # Run clang-tidy
          ./build_protocol_targets.sh clang-tidy

      # This tests building the protocol in a container, the same way we do it in production
      - name: Build Protocol Server in Docker Container
        if: runner.os == 'Linux'
        working-directory: protocol
        run: ./build_protocol_targets.sh --cmakebuildtype=Release WhistServer

      # This ensures that all the build files from build_protocol_targets.sh have actually been generated
      - name: Ensure that all protocol build files are present
        if: runner.os == 'Linux'
        working-directory: mandelboxes
        run: ./scripts/copy_protocol_build.sh

      - name: Lint CMake Files
        if: runner.os == 'Linux'
        working-directory: protocol
        run: |
          pip install cmakelint
          sudo apt-get install fd-find
          # Ubuntu-specific PATH fix for `fd`
          ln -s $(which fdfind) ~/.local/bin/fd
          ./lint-cmake.sh
