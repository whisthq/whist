################### build-assets ###################
# EXPOSES the appropriate build-assets package to
# handle copying files from outside the repo
####################################################

# This argument controls whether to copy the protocol
# in this image or in a child image. In dev mode, we
# want to copy the protocol as late as possible to
# make it easier to iterate, but in prod mode we want
# to copy the protocol as early as possible to share
# layers between images.
ARG BuildAssetPackage "protocol"

# This build-arg is added by the build script and is
# either "dummy" or "nvidia".
ARG DisplayDriver "dummy"

FROM whist/build-assets:$BuildAssetPackage as build-assets

#################### libinput-build ####################
# - Install build dependencies as per the documentation
#   at https://wayland.freedesktop.org/libinput/doc/latest/building.html#build-dependencies-per-distribution
# - Download libinput 1.19
# - Configure and build libinput
# EXPOSES .deb build of libinput for later stages
########################################################
FROM ubuntu:20.04 as libinput-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install build dependencies for libinput
RUN apt-get update && apt-get install --no-install-recommends -y \
    git \
    gcc \
    g++ \
    pkg-config \
    meson \
    check \
    libudev-dev \
    libevdev-dev \
    doxygen \
    graphviz \
    python3-sphinx \
    python3-recommonmark \
    python3-sphinx-rtd-theme \
    python3-pytest-xdist \
    libwacom-dev \
    libcairo2-dev \
    libgtk-3-dev \
    libglib2.0-dev \
    libmtdev-dev \
    wget \
    xz-utils \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Download libinput source
RUN wget -qO - https://freedesktop.org/software/libinput/libinput-1.19.2.tar.xz | tar xJ

# Configure and build libinput
RUN meson libinput-1.19.2 build \
    --prefix=/usr \
    --libdir=/usr/lib \
    -D udev-dir=/usr/lib/udev \
    -D tests=false \
    -D documentation=false \
    && ninja -C build

# Install libinput to package folder
RUN mkdir /libinput-whist \
    && DESTDIR=/libinput-whist ninja -C build install

# Setup debian package information
COPY input/libinput/debian/control /libinput-whist/DEBIAN/control

# Build debian package
RUN dpkg-deb --build libinput-whist

#################### xf86-input-libinput-build ####################
# - Install build dependencies as per the documentation
#   at https://gitlab.freedesktop.org/xorg/driver/xf86-input-libinput
# - For libinput dependency, copy and install libinput from the
#   libinput-build stage
# - Download xf86-input-libinput source
# - Configure and build xf86-input-libinput
# EXPOSES build of xf86-input-libinput
###################################################################
FROM ubuntu:20.04 as xf86-input-libinput-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Copy libinput package
COPY --from=libinput-build libinput-whist.deb /

# Install build dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    xorg-dev \
    xutils-dev \
    libudev-dev \
    wget \
    ca-certificates \
    build-essential \
    automake \
    autoconf \
    libtool \
    bzip2 \
    ./libinput-whist.deb \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/* /libinput-whist.deb

# Download xorgproto source (xf86-input-libinput dependency)
RUN wget -qO - https://www.x.org/archive/individual/proto/xorgproto-2021.5.tar.bz2 | tar xj

# Configure and build xorgproto
RUN cd xorgproto-2021.5 \
    && autoreconf -vif \
    && ./configure \
    && make -j \
    && make -j install

# Download xf86-input-libinput source
RUN wget -qO - https://www.x.org/releases/individual/driver/xf86-input-libinput-1.2.0.tar.bz2 | tar xj

# Configure and build xf86-input-libinput
RUN cd xf86-input-libinput-1.2.0 \
    && autoreconf -vif \
    && ./configure \
    --disable-static \
    --prefix=/usr \
    && make -j

# Install xf86-input-libinput to package folder
RUN mkdir /xf86-input-libinput-whist \
    && cd xf86-input-libinput-1.2.0 \
    && make DESTDIR=/xf86-input-libinput-whist install

# Setup debian package information
COPY input/xf86-input-libinput/debian/control /xf86-input-libinput-whist/DEBIAN/control

# Build debian package
RUN dpkg-deb --build xf86-input-libinput-whist

#################### xf86-video-dummy-build ####################
# - Install build dependencies
# - Download xf86-video-dummy source
# - Configure and build xf86-video-dummy
# EXPOSES build of xf86-video-dummy
################################################################
FROM ubuntu:20.04 as xf86-video-dummy-build

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

RUN apt-get update && apt-get install --no-install-recommends -y \
    xorg-dev \
    xutils-dev \
    wget \
    ca-certificates \
    build-essential \
    automake \
    autoconf \
    libtool \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Download xf86-video-dummy source
RUN wget -qO - https://www.x.org/releases/individual/driver/xf86-video-dummy-0.4.0.tar.gz | tar xz

# Configure and build xf86-video-dummy
RUN cd xf86-video-dummy-0.4.0 \
    && autoreconf -vif \
    && ./configure \
    --disable-static \
    --prefix=/usr \
    && make -j

# Install xf86-video-dummy to package folder
RUN mkdir /xf86-video-dummy-whist \
    && cd xf86-video-dummy-0.4.0 \
    && make DESTDIR=/xf86-video-dummy-whist install

# Setup debian package information
COPY display/xf86-video-dummy/debian/control /xf86-video-dummy-whist/DEBIAN/control

# Build debian package
RUN dpkg-deb --build xf86-video-dummy-whist

#################### nvidia-grid-driver ####################
# - Copy and unpack the nvidia grid driver installer
# - Install its contents into an output directory
# EXPOSES the grid driver
############################################################
FROM ubuntu:20.04 as nvidia-grid-driver

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install installer dependencies
RUN apt-get update && apt-get install --no-install-recommends -y \
    kmod \
    libglvnd0 \
    libglvnd-dev \
    xorg-dev \
    xorg-server-source \
    pkg-config \
    libgtk-3-dev \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Retrieve nvidia driver installer
COPY --from=build-assets --chmod=550 nvidia-driver/nvidia-driver-installer.run /nvidia-driver-installer.run

# Unpack the installer & create necessary symbolic link(s)
RUN sh nvidia-driver-installer.run -x \
    && ln -sf /dist/usr/lib/libGL.so.1 /usr/lib/libGL.so.1

# Install the driver to a folder
# Note: We don't install `--install-compat32-libs` because it's not needed/supported
# on our Dockerfiles, which run 64-bit kernels.
RUN mkdir /dist /ignore && \
    cd NVIDIA* && \
    ./nvidia-installer --silent \
    --x-prefix=/dist/usr \
    --x-module-path=/dist/usr/lib/xorg/modules \
    --opengl-prefix=/dist/usr \
    --utility-prefix=/dist/usr \
    --utility-libdir=lib \
    --documentation-prefix=/ignore \
    --no-nvidia-modprobe \
    --no-rpms \
    --no-backup \
    --no-kernel-module \
    --no-nouveau-check \
    --no-libglx-indirect \
    --no-distro-scripts \
    --no-drm \
    --no-check-for-alternate-installs \
    --no-install-libglvnd \
    --skip-depmod

# Copy configuration files needed for Vulkan to work
RUN mkdir /dist/etc && \
    cp -r /etc/{vulkan,nvidia,OpenCL} /dist/etc

#################### whist-teleport-drag-drop ####################
# - Copy and build the FUSE service to handle teleport drag-drop
#   events
# EXPOSES the teleport fuse service
##################################################################
FROM ubuntu:20.04 as whist-teleport-drag-drop

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install FUSE build dependencies
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    gcc \
    fuse3 \
    libfuse3-dev \
    pkg-config \
    build-essential \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

RUN mkdir -p /whist-teleport-drag-drop/{src,build}

COPY teleport/drag-drop /whist-teleport-drag-drop/src

# hadolint ignore=SC2046
RUN cd /whist-teleport-drag-drop/src \
    && gcc -Wall -Werror -D _GNU_SOURCE unshare.c -o unshare.o -c \
    && gcc -Wall -Werror unshare.o drag-drop.c $(pkg-config fuse3 --cflags --libs) -o ../build/whist-teleport-drag-drop

#################### whist-spicy-cursors-theme ####################
# - Copy and build the WhistSpicyCursors theme, which encodes
#   cursor type/ID in the cursor's hot_x and hot_y values.
# EXPOSES the built cursor theme.
###################################################################
FROM ubuntu:20.04 as whist-spicy-cursors-theme

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive

# Update apt source list
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*

# Install cursor theme build dependencies (xcursogen)
RUN apt-get update && apt-get install --allow-downgrades --no-install-recommends -y \
    x11-apps \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

COPY display/theme/cursor-builder /cursor-builder

RUN cd /cursor-builder \
    && ./make.sh \
    && mv WhistSpicyCursors /WhistSpicyCursors

#################### hydraulic-press #########################
# - Copy, set permissions for, and install all base mandelbox
#   scripts, services, and config files to the hydraulic-squash
#   directory so that they can be neatly organized here while
#   only taking up one Docker layer in whist-base
# EXPOSES the hydraulic-squash directory
##############################################################
FROM ubuntu:20.04 as hydraulic-press

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C
ENV DEBIAN_FRONTEND noninteractive
ENV HYDRAULIC_ROOT /hydraulic-squash

RUN mkdir -p $HYDRAULIC_ROOT/{etc/dbus-1,usr/share/whist/private,root,run/user,/home/whist}

#########################
# Permissions
#########################

# Mount cgroup from host (Is this needed?)
VOLUME [ "/sys/fs/cgroup" ]

RUN \
    # Create whist user with dynamic, random password and do NOT add to sudo group
    useradd --create-home whist \
    && password=$(tr -dc 'A-Za-z0-9!"#$%&\()*+,-./;<=>?@[\]^_`{|}~' </dev/urandom | head -c 32  ; echo) \
    && echo whist:"${password}" | chpasswd \
    # Workaround for sudo bug in Docker: https://github.com/sudo-project/sudo/issues/42
    && echo "Set disable_coredump false" >> $HYDRAULIC_ROOT/etc/sudo.conf \
    # Set appropriate user permissions
    && chown -vR whist:whist $HYDRAULIC_ROOT/home/whist \
    && chown root:root $HYDRAULIC_ROOT/run/user \
    # Set /usr/share/whist to root-only
    && chgrp root -R $HYDRAULIC_ROOT/usr/share/whist \
    && chown root:root $HYDRAULIC_ROOT/usr/share/whist \
    && chmod 600 -R $HYDRAULIC_ROOT/usr/share/whist \
    # Set /root to root-only
    && chgrp root -R $HYDRAULIC_ROOT/root \
    && chown root:root $HYDRAULIC_ROOT/root \
    && chmod 600 -R $HYDRAULIC_ROOT/root

# Set up script to run a program as user `whist` (make sure to do
# this after setting /usr/share/whist to 600)
COPY --chmod=550 utils/run-as-whist-user.sh $HYDRAULIC_ROOT/usr/share/whist/run-as-whist-user.sh

#########################
# Input
#########################

COPY input/Xmodmap $HYDRAULIC_ROOT/root/.Xmodmap

#########################
# Display
#########################

# Redeclare the arg to expose it in this scope
ARG DisplayDriver "dummy"

# Copy correct configuration for X11 display based on existence of GPU
COPY display/whist-${DisplayDriver}-display.conf $HYDRAULIC_ROOT/usr/share/X11/xorg.conf.d/01-whist-display.conf

# Set up Whist service that starts before X to fix the Nvidia GPU bus ID and device paths
COPY --chown=root:root --chmod=600 display/whist-update-xorg-conf.service $HYDRAULIC_ROOT/etc/systemd/system/
COPY --chmod=550 display/update-xorg-conf.sh $HYDRAULIC_ROOT/usr/share/whist/

# Set up Whist service to launch X11 display
COPY display/whist-display-config.env $HYDRAULIC_ROOT/usr/share/whist
COPY display/xinitrc $HYDRAULIC_ROOT/root/.xinitrc
COPY --chown=root:root --chmod=600 display/whist-display.service $HYDRAULIC_ROOT/etc/systemd/system
COPY --chmod=550 display/whist-display.sh $HYDRAULIC_ROOT/usr/share/whist/whist-display.sh

# I-Bus launcher script
COPY --chmod=555 display/run_ibus.sh $HYDRAULIC_ROOT/home/whist/run_ibus.sh

# Set up script to update display DPI on-the-fly
COPY --chmod=550 display/update-whist-dpi.sh $HYDRAULIC_ROOT/usr/share/whist/update-whist-dpi.sh

#########################
# Theme
#########################

# Set up fontconfig to us the fonts we configure
COPY --chown=whist display/theme/mac-fonts.conf $HYDRAULIC_ROOT/home/whist/.config/fontconfig/mac-fonts.conf
COPY --chown=whist display/theme/windows-fonts.conf $HYDRAULIC_ROOT/home/whist/.config/fontconfig/windows-fonts.conf
COPY --chown=whist display/theme/linux-fonts.conf $HYDRAULIC_ROOT/home/whist/.config/fontconfig/linux-fonts.conf

# Copy over our fonts
COPY --from=build-assets fonts $HYDRAULIC_ROOT/usr/local/share/fonts

# Set up window manager running on X server, with GTK/QT theming
COPY display/theme/gtk-3-settings.ini $HYDRAULIC_ROOT/etc/gtk-3.0/settings.ini
COPY display/theme/gtkrc-2.0 /root/.gtkrc-2.0
COPY --chown=whist display/theme/gtkrc-2.0 $HYDRAULIC_ROOT/home/whist/.gtkrc-2.0
COPY display/theme/qt4-settings.conf $HYDRAULIC_ROOT/root/.config/Trolltech.conf
COPY --chown=whist display/theme/qt4-settings.conf $HYDRAULIC_ROOT/home/whist/.config/Trolltech.conf
COPY display/theme/awesome-rc.lua $HYDRAULIC_ROOT/home/whist/.config/awesome/rc.lua
COPY --from=whist-spicy-cursors-theme /WhistSpicyCursors $HYDRAULIC_ROOT/usr/share/icons/WhistSpicyCursors

# Configure Keyboard Shortcuts
COPY display/theme/gtk-keys.css $HYDRAULIC_ROOT/usr/share/themes/KeyboardShortcutsMac/gtk-3.0/
COPY --chown=whist display/theme/gtk-keys.css $HYDRAULIC_ROOT/home/whist/.themes/KeyboardShortcutsMac/gtk-3.0/

#########################
# Audio
#########################

# Set up service to start pulseaudio
COPY --chmod=550 audio/run-pulseaudio.sh $HYDRAULIC_ROOT/usr/share/whist
COPY audio/pulse-client.conf $HYDRAULIC_ROOT/etc/pulse/client.conf
COPY audio/pulse-default.pa $HYDRAULIC_ROOT/etc/pulse/default.pa
COPY audio/pulse-daemon.conf $HYDRAULIC_ROOT/etc/pulse/daemon.conf
COPY --chown=root:root --chmod=600 audio/whist-audio.service $HYDRAULIC_ROOT/etc/systemd/system

#########################
# Startup
#########################

# Add inotify file watching blockers
COPY --chmod=555 utils/block-until-file-exists.sh $HYDRAULIC_ROOT/usr/local/bin/block-until-file-exists.sh
COPY --chmod=555 utils/block-while-file-exists.sh $HYDRAULIC_ROOT/usr/local/bin/block-while-file-exists.sh

# Copy startup systemd service
COPY --chmod=550 startup/whist-startup.sh $HYDRAULIC_ROOT/usr/share/whist
COPY --chown=root:root --chmod=600 startup/whist-startup.service $HYDRAULIC_ROOT/etc/systemd/system

# Dockerfile entrypoint (starts systemd)
COPY --chmod=550 startup/entrypoint.sh $HYDRAULIC_ROOT/usr/share/whist/entrypoint.sh

#########################
# Main
#########################

# Copy D-Bus configuration to allow `root` to access `whist` D-Bus
COPY main/dbus-session-local.conf $HYDRAULIC_ROOT/etc/dbus-1/session-local.conf

# Script to launch `whist-application` as the `whist` user
COPY --chmod=555 main/run-whist-application.sh $HYDRAULIC_ROOT/usr/bin/run-whist-application.sh

COPY --chmod=555 utils/set-timezone.sh $HYDRAULIC_ROOT/usr/bin/set-timezone.sh
COPY --chmod=555 utils/sudo-set-timezone.sh $HYDRAULIC_ROOT/usr/bin/sudo-set-timezone.sh

# Consolidate and copy teleport executable and launcher script
COPY --chmod=555 --from=whist-teleport-drag-drop /whist-teleport-drag-drop/build/whist-teleport-drag-drop $HYDRAULIC_ROOT/opt/teleport/drag-drop
COPY --chmod=555 teleport/drag-drop/run-whist-teleport-drag-drop.sh $HYDRAULIC_ROOT/usr/bin/run-whist-teleport-drag-drop.sh

# Service which launches the server protocol and application
COPY --chmod=550 main/run-whist-server.sh $HYDRAULIC_ROOT/usr/share/whist/run-whist-server.sh
COPY --chown=root:root --chmod=600 main/whist-main.service $HYDRAULIC_ROOT/etc/systemd/system

# Create a systemd "drop-in" directory to override configurations without editing
# the unit files directly. This will be used to include the session id on the service
# output path. We do this for the main service which launches after startup.
RUN mkdir -p $HYDRAULIC_ROOT/etc/systemd/system/whist-main.service.d/

########################## whist-base ##########################
# - Copy and install libinput from libinput-build
# - Copy and install xf86-input-libinput from
#   xf86-input-libinput-build
# - Copy grid driver installation from
#   nvidia-grid-driver if GPU is present
# - Copy and install teleport FUSE service from
#   whist-teleport-fuse
# - Copy all base mandelbox files and scripts from
#   hydraulic-press
# - Install and configure any necessary packages for
#   our base mandelbox image
# EXPOSES all of whist-base as the final image
################################################################
FROM ubuntu:20.04 as whist-base-pre-graphics

# Force failure on non-zero exit code for commands with a pipe in them
SHELL ["/bin/bash", "-Eeuo", "pipefail", "-c"]

ENV container docker
ENV LC_ALL C

# These two resolve pedantic warnings with dkpg and invoke-rc
ENV DEBIAN_FRONTEND noninteractive
ENV RUN_LEVEL=1

ENV init /sbin/init
ENV SENTRY_DSN https://6765c9aeb9c449a599ca6242829799b8@o400459.ingest.sentry.io/6073955

# Copy libinput, xf86-input-libinput, and xf86-video-dummy
COPY --from=libinput-build /libinput-whist.deb /deb/libinput-whist.deb
COPY --from=xf86-input-libinput-build /xf86-input-libinput-whist.deb /deb/xf86-input-libinput-whist.deb
COPY --from=xf86-video-dummy-build /xf86-video-dummy-whist.deb /deb/xf86-video-dummy-whist.deb

# Copy protocol dependencies installer
COPY --from=build-assets setup-linux-build-environment.sh /usr/share/whist/setup-linux-build-environment.sh

# Mount cgroup from host (Is this needed?)
VOLUME [ "/sys/fs/cgroup" ]

# Unified apt installation steps
RUN sed -i 's/# deb/deb/g' /etc/apt/sources.list \
    && apt-get update \
    && apt-get autoremove -y \
    # Avoid interactive installation (for tzdata, e.g.)
    && LOCAL="yes" \
    apt-get install --allow-downgrades --no-install-recommends -y \
    ### Systemd
    systemd \
    systemd-sysv \
    # Locales is needed to fix some systemd warnings
    locales \
    locales-all \
    ### X11
    # Up-to-date builds of libraries (remember to delete /deb below this step)
    ./deb/libinput-whist.deb \
    ./deb/xf86-input-libinput-whist.deb \
    ./deb/xf86-video-dummy-whist.deb \
    ### Input Events
    keyboard-configuration \
    # Developer utils and dependencies
    libxtst-dev \
    xinput \
    evtest \
    xdotool \
    ### DBus Functionality
    dbus-x11 \
    libdbus-1-dev \
    libevent-dev \
    ### Keyring and Authentication Utilities (for Chromium, e.g.)
    gir1.2-secret-1 \
    gnome-keyring \
    libsecret-1-0 \
    ### Fetching Utilities (for downloading Sentry, e.g.)
    wget \
    ca-certificates \
    libcurl4 \
    curl \
    ### General Utilities
    xvfb \
    wmctrl \
    gnupg2 \
    libfido2-1 \
    # Provides `killall` for some mandelbox functionality
    psmisc \
    # Including this silences some warnings from systemd services
    upower \
    libgbm1 \
    lsb-release \
    ufw \
    libxcb-dri3-0 \
    git \
    sudo \
    jq \
    inotify-tools \
    # This is installed by update-alternatives if not manually specified
    liblzma5 \
    ### Debugging and Development Utilities
    less \
    vim \
    nano \
    tzdata \
    ### Display
    libxdamage-dev \
    xclip \
    x11-xserver-utils \
    xserver-xorg-core \
    awesome \
    xsettingsd \
    linux-generic-hwe-20.04 \
    libgstreamer-plugins-base1.0-0 \
    libgstreamer1.0-0 \
    screen-resolution-extra \
    xinit \
    ### I-Bus (for input method support)
    ibus \
    ibus-pinyin \
    ibus-anthy \
    ibus-hangul \
    ibus-unikey \
    ibus-gtk \
    ibus-gtk3 \
    at-spi2-core \
    ### Theme
    # Note: qt4-qtconfig has not been ported to Ubuntu 20, so we can't install it.
    unzip \
    xz-utils \
    awesome \
    awesome-extra \
    lxappearance \
    gtk-chtheme \
    gtk2-engines-murrine \
    gtk2-engines-pixbuf \
    libglib2.0-dev-bin \
    libglib2.0-dev \
    libxml2-utils \
    ### Unicode Fonts
    fonts-noto \
    fonts-noto-core \
    fonts-noto-cjk \
    fonts-noto-cjk-extra \
    fonts-noto-extra \
    fonts-noto-mono \
    fonts-noto-ui-core \
    fonts-noto-ui-extra \
    fonts-noto-unhinted \
    ### Audio
    # PulseAudio dependencies
    libunwind8 \
    liborc-0.4-0 \
    libpulse0 \
    libsnapd-glib1 \
    libsndfile1 \
    libsoxr0 \
    libasound2-data \
    libasound2 \
    libasound2-dev \
    libspeexdsp1 \
    libwebrtc-audio-processing1 \
    libasound2-plugins \
    pulseaudio-utils \
    libltdl7 \
    libtdb1 \
    # PulseAudio
    pulseaudio \
    ### X11 Dependencies
    libc6 \
    libfontconfig1 \
    libfreetype6 \
    libice6 \
    libtinfo6 \
    libutempter0 \
    libx11-6 \
    libxaw7 \
    libxext6 \
    libxft2 \
    libxinerama1 \
    libxmu6 \
    libxpm4 \
    libxt6 \
    xbitmaps \
    x11-utils \
    ### FUSE (for drag-drop, e.g.)
    fuse3 \
    # Install xeyes, which is a harmless default application to use
    x11-apps \
    ### Whist Protocol Dependencies
    && /usr/share/whist/setup-linux-build-environment.sh \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/* /deb

# Set the SHELL option -o pipefail before RUN with a pipe in
SHELL ["/bin/bash", "-o", "pipefail", "-c"]

# Unified post-apt installation steps
RUN \
    ### Systemd Configuration
    # Remove sysinit targets except for systemd-tmpfiles-setup
    find /lib/systemd/system/sysinit.target.wants -type l ! -name systemd-tmpfiles-setup.service \
    # Remove unneeded multi-user services
    && rm -f /lib/systemd/system/multi-user.target.wants/* \
        /etc/systemd/system/*.wants/* \
        /lib/systemd/system/local-fs.target.wants/* \
        /lib/systemd/system/sockets.target.wants/*udev* \
        /lib/systemd/system/sockets.target.wants/*initctl* \
        /lib/systemd/system/basic.target.wants/* \
        /lib/systemd/system/anaconda.target.wants/* \
        /lib/systemd/system/plymouth* \
        /lib/systemd/system/systemd-update-utmp* \
    # Disable more unneeded services (note: sshd is disabled by default so we don't need to disable it)
    && systemctl mask plymouth \
                      systemd-hostnamed \
                      acpid \
                      NetworkManager-wait-online \
    # Remove ProtectHostname=yes from logind and timedate services
    && sed -i "/^ProtectHostname=yes$/d" /usr/lib/systemd/system/systemd-{login,time{sync,date}}d.service \
    # Enable proper usage of resolvconf in containers (see https://github.com/moby/moby/issues/1297)
    && echo "resolvconf resolvconf/linkify-resolvconf boolean false" | debconf-set-selections \
    ### Sentry CLI Installation
    # Install the Sentry CLI and set the DSN so that we can report Bash errors to Sentry
    && curl -SL "https://downloads.sentry-cdn.com/sentry-cli/1.74.3/sentry-cli-Linux-x86_64" \
    > /usr/local/bin/sentry-cli \
    && chmod 0755 /usr/local/bin/sentry-cli \
    ### User Permissions Configuration
    # Create whist user with dynamic, random password and do NOT add to sudo group
    && useradd --create-home whist \
    && password=$(tr -dc 'A-Za-z0-9!"#$%&\()*+,-./;<=>?@[\]^_`{|}~' </dev/urandom | head -c 32  ; echo) \
    && echo whist:"${password}" | chpasswd \
    # Workaround for sudo bug in Docker: https://github.com/sudo-project/sudo/issues/42
    && echo "Set disable_coredump false" >> /etc/sudo.conf \
    # Set appropriate user permissions and create /whist/ Directory and Subdirectories in /usr/share
    && chown -vR whist:whist /home/whist \
    && chown root:root /run/user \
    && mkdir -p /usr/share/whist/private \
    # Set /usr/share/whist to root-only
    && chgrp root -R /usr/share/whist \
    && chown root:root /usr/share/whist \
    && chmod 600 -R /usr/share/whist \
    # Install playerctl for media keys support. We install playerctl straight from
    # Github releases because as usual the Ubuntu package is horribly out of date
    # (and in particular don't support daemon mode).
    && wget -q https://github.com/altdesktop/playerctl/releases/download/v2.3.1/playerctl-2.3.1_amd64.deb \
    && dpkg -i ./playerctl-2.3.1_amd64.deb \
    && rm ./playerctl-2.3.1_amd64.deb \
    ### WhiteSur GTK Theme, for macOS-like theming
    && mkdir -p /home/whist/.themes \
    && wget -q https://github.com/vinceliuice/WhiteSur-gtk-theme/archive/refs/tags/2022-02-21.tar.gz \
    && tar -xzf 2022-02-21.tar.gz \
    && cd WhiteSur-gtk-theme-2022-02-21/release \
    # We untar both light and dark themes. There are also "solid" themes, if we ever want to use them.
    && tar -xf WhiteSur-light-40-0.tar.xz \
    && tar -xf WhiteSur-dark-40-0.tar.xz \
    # We copy the themes to both usr/share/themes (root-path) and /home/whist/.themes (user-path)
    # since we're not sure which one will be used.
    && cp -r WhiteSur-light WhiteSur-dark /usr/share/themes \
    && cp -r WhiteSur-light WhiteSur-dark /home/whist/.themes \
    && cd ../.. && rm -rf WhiteSur-gtk-theme-2022-02-21 2022-02-21.tar.gz \
    ### Configure Default Application
    && ln -sf "$(which xeyes)" /usr/bin/whist-application

#########################
# Hardware Acceleration
# (This stage runs only if a GPU is present)
#########################

FROM whist-base-pre-graphics as whist-base-nvidia

# Install the Nvidia GRID Driver and libraries for (limited) hardware acceleration
RUN apt-get update && apt-get install --no-install-recommends -y \
    libglvnd0 \
    vainfo \
    vdpauinfo \
    mesa-vdpau-drivers \
    libvdpau-va-gl1 \
    && apt-get autoremove -y \
    && apt-get clean \
    && rm -rf /tmp/* /var/tmp/*
COPY --from=nvidia-grid-driver /dist /
ENV GPU true

#########################
# Non-GPU environment setup
# (Runs only if running on non-GPU host)
#########################

FROM whist-base-pre-graphics as whist-base-dummy
ENV GPU false

#########################
# Display
#########################

# Pull from either the stage with installed Nvidia drivers (whist-base-nvidia)
# or the stage with only dummy drivers (whist-base-dummy) based on whether
# the host has a GPU or not.
FROM whist-base-${DisplayDriver} as whist-base

#########################
# Startup
#########################

# Add whist user for setting timezone to sudoers
RUN echo 'whist   ALL=NOPASSWD: /usr/bin/set-timezone.sh' >> /etc/sudoers

# Set up the entrypoint for the mandelbox (which starts systemd)
CMD ["/usr/share/whist/entrypoint.sh"]

#########################
# Hydaulic Press Layer
#########################

# Copy over the big squashed layer from hydraulic-press stage directly
# into our filesystem
COPY --from=hydraulic-press /hydraulic-squash /

# Enable the systemd services we just copied over
RUN systemctl enable whist-{startup,update-xorg-conf,display,audio,main}

#########################
# Cleanup
#########################

# Install Whist Protocol binaries and helper files
# We do this last to make it easier to modify the
# protocol and rebuild the base Dockerfile without
# needing to redo many steps
COPY --from=build-assets protocol/* /usr/share/whist/
